/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Simulator;

import schedulers.RoundRobin;
import java.util.LinkedHashMap;
import java.util.Map;
import unbc.ca.distributed.distributions.Generator;

/**
 *
 * @author behnish
 */
public class Parameter extends javax.swing.JPanel {

    /**
     * Creates new form Parameter
     */
    Generator u = null;
    Generator p = null;

    private int seqenceno = 1;
    private int simulationClock = 1;

    public Parameter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrival = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        length = new javax.swing.JTextField();
        backlog = new javax.swing.JTextField();
        operationRoom = new javax.swing.JTextField();
        surgeons = new javax.swing.JTextField();
        simulate = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        clockValue = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        algorithm = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        workingDays = new javax.swing.JTextField();

        arrival.setText("5");

        jLabel1.setText("Arrival Rate");

        jLabel4.setText("Number of Surgeons");

        jLabel3.setText("Number of Operating Room");

        jLabel8.setText("Backlog Patient");

        jLabel5.setText("Simulation Length (Days)");

        length.setText("14");

        backlog.setText("10");

        operationRoom.setText("1");
        operationRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operationRoomActionPerformed(evt);
            }
        });

        surgeons.setText("1");
        surgeons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surgeonsActionPerformed(evt);
            }
        });

        simulate.setText("Simulate");
        simulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateActionPerformed(evt);
            }
        });

        jLabel9.setText("Current Clock");

        clockValue.setText("1");

        jLabel2.setText("Algorithm");

        algorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Global Queue for all Surgeons", "Local Queue for Each Surgeon" }));
        algorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmActionPerformed(evt);
            }
        });

        jLabel6.setText("No of Working Days");

        workingDays.setText("1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)))
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(length, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clockValue, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arrival, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(algorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(backlog, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                .addComponent(operationRoom, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(workingDays, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(surgeons, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(simulate)))
                .addContainerGap(346, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(clockValue)))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(algorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(surgeons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workingDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(operationRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(backlog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(length, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(simulate)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void operationRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operationRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_operationRoomActionPerformed

    private int rateD;
    private void simulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateActionPerformed
        // TODO add your handling code here:
        simulate.setEnabled(false);
        int ors = Integer.parseInt(operationRoom.getText());
        int sur = Integer.parseInt(surgeons.getText());
        int rate = Integer.parseInt(arrival.getText());
        int backlogpaitent = Integer.parseInt(backlog.getText());
        int wDays = Integer.parseInt(workingDays.getText());
        this.rateD = rate;

        int simulationLenth = Integer.parseInt(length.getText());

        ObjectFactory.setSimulationLenth(simulationLenth * 600);

        /* Generation of patient accorind to distribution */
        initMap(simulationLenth);

        /* Scheduling surgeon's operation day and consulting day with round robin 
         // number of surgeons, total days, number of workingDays per week, operation rooms        
         */
        schedulerSurgeon(sur, simulationLenth, wDays, ors);

        //printAllPatient();
        //printSchedule();
        Simulation s = new Simulation(ors, sur, backlogpaitent, algorithm.getSelectedItem().toString());
        ObjectFactory.setSimulation(s);
        s.start();
    }//GEN-LAST:event_simulateActionPerformed

    private void surgeonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surgeonsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surgeonsActionPerformed

    private void algorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_algorithmActionPerformed

    private void printAllPatient() {
        for (Map.Entry<Integer, LinkedHashMap<Integer, Patient>> entry : ObjectFactory.getPatientG().entrySet()) {
            Integer integer = entry.getKey();
            LinkedHashMap<Integer, Patient> concurrentHashMap = entry.getValue();

            System.out.println("For day " + integer);

            for (Map.Entry<Integer, Patient> entry1 : concurrentHashMap.entrySet()) {
                Integer integer1 = entry1.getKey();
                Patient p = entry1.getValue();
                System.out.println("P: " + p.getSeqenceNumber() + " simclock " + p.getDelay());

            }

        }

    }

    private void printSchedule() {
        for (Map.Entry<Integer, LinkedHashMap<Integer, String>> entry : ObjectFactory.getSurgeonSchedule().entrySet()) {
            Integer integer = entry.getKey();
            LinkedHashMap<Integer, String> linkedHashMap = entry.getValue();

            System.out.println("For sur " + integer);

            for (Map.Entry<Integer, String> entry1 : linkedHashMap.entrySet()) {
                Integer integer1 = entry1.getKey();
                String string = entry1.getValue();

                System.out.print(integer1 + "->" + string + ",");

            }
            System.out.println();

        }
    }

    public int noOfPatients() {
        if (p == null) {
            p = Utilities.returnDistribution("Poisson", rateD, 1);
        }
        return p.generate();
    }

    private double delayPatient() {
        if (u == null) {
            u = Utilities.returnDistribution("Uniform", 50, 100);
        }
        return u.generate();
    }
    private double backlogPatient() {
        if (u == null) {
            u = Utilities.returnDistribution("Uniform", 1, 10);
        }
        return u.generate();
    }


    public void initMap(int totalDays) {
        int day = 1, counter = 0;

        int c = 1;
        boolean backlogCheck = false;
        while (day <= totalDays) {
            if (counter == 5) {
                simulationClock += 1200;
                day += 2;
                counter = 0;
            }
            if (day <= totalDays) {
                ObjectFactory.getWorkingDays().put(c, day);
                c++;
                ObjectFactory.getPatientG().put(day, new LinkedHashMap<Integer, Patient>());
                int num = noOfPatients();
                for (int j = 1; j <= num; j++) {
                    Patient p1 = new Patient(seqenceno);
                    double delay = delayPatient();
                    simulationClock += delay;
                    p1.setStartTime(simulationClock);
                    p1.setDelay(simulationClock);
                    ObjectFactory.getPatientG().get(day).put(j, p1);
                    seqenceno++;
                }
                /* For backLog */

                if (!backlogCheck) {
                    for (int j = 1; j <= Integer.parseInt(backlog.getText()); j++) {
                        Patient p1 = new Patient(seqenceno);
                        double delay = backlogPatient();
                        simulationClock += delay;
                        p1.setStartTime(simulationClock);
                        p1.setDelay(simulationClock);
                        ObjectFactory.getBacklogPatients().put(j, p1);
                        seqenceno++;
                    }
                    backlogCheck = true;
                }
                /* ---------------------------------ends here-------------------*/

                simulationClock = day * 600;
                day++;
                counter++;
            }
        }

        System.out.println("Total no of patients are " + (seqenceno - 1));
    }

    private void schedulerSurgeon(int totalSurgeons, int totalDays, int workingDaysForSur, int nOfOperatingRooms) {
        RoundRobin rr = new RoundRobin(totalSurgeons, totalDays, workingDaysForSur, nOfOperatingRooms);
        ObjectFactory.setSurgeonSchedule(rr.returnScheduler());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithm;
    private javax.swing.JTextField arrival;
    private javax.swing.JTextField backlog;
    public javax.swing.JLabel clockValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField length;
    private javax.swing.JTextField operationRoom;
    public javax.swing.JButton simulate;
    private javax.swing.JTextField surgeons;
    private javax.swing.JTextField workingDays;
    // End of variables declaration//GEN-END:variables

}
